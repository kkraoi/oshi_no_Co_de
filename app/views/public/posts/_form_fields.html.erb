<%# タイトル %>
<div class="u-scroll-target" id="title">
  <section class="u-sec">
    <div class="u-inner-4">
      <h2 class="u-title-1">タイトル（必須）</h2>
      <%= render 'public/shared/field_error', object: post, field: :title %>
      <%= f.text_field :title, class: "u-field", placeholder: "例: JSでタブメニュー" %>
    </div>
  </section>
</div>

<%# コード %>
<div class="u-scroll-target" id="code">
  <section class="u-sec">
    <div class="u-inner-4">
      <h2 class="u-title-1">コード（必須）</h2>
      <div id="js-fields-container">
        <%# fields_for: 入れ子のモデルのフォームを生成するためのヘルパー。引数は子モデルをシンボルで取り、ブロック引数は、子モデルに対するフォームビルダーオブジェクトとして扱う。 %>
        <%= f.fields_for :codes do |code_fields| %>
          <%= render 'code_fields', f: code_fields %>
        <% end %>
      </div>
      <div class="u-btn-wrap u-mt-30">
        <button type="button" id="js-add-field" class="u-btn opt-size-s" aria-label="フィールドを追加する"><i class="fa-solid fa-plus"></i> フィールドを追加する</button>
      </div>
      <template id="js-field-template">
        <%# raw() => テンプレで使うコードをエスケープすると、文字列のまま出力されてしまう。なのでそれを防止する。セキュリティ面: このケースはユーザーが入力する使い方をしていないので、問題ない。 %>
        <%# gsub("\n", "") => テンプレ内部の改行を取り除く %>
        <%# jsで扱うHTML文字列を1行にしてバグなどを防ぐ %>
        <%= raw(render('code_fields', f: nil).gsub("\n", "")) %>
      </template>
    </div>
  </section>
</div>

<%# 解説 %>
<div class="u-scroll-target" id="description">
  <section class="u-sec">
    <div class="u-inner-4">
      <h2 class="u-title-1">解説</h2>
      <p class="u-mb-10">コードの説明をMD記法で記載することができます。</p>
      <%= render 'public/shared/field_error', object: post, field: :description %>
      <%= f.text_area :description, class: "u-field-text_area", placeholder: "例: 
## JSの解説
### ターゲットとなるクラスを取得する
解説解説..." %>
    </div>
  </section>
</div>